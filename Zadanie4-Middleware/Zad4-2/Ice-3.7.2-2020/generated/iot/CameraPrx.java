//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.3
//
// <auto-generated>
//
// Generated from file `iot.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package iot;

public interface CameraPrx extends BasicDevicePrx
{
    default void setZoom(float zoomDegree)
        throws ArgumentOutOfRange,
               DeviceNotActive
    {
        setZoom(zoomDegree, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void setZoom(float zoomDegree, java.util.Map<String, String> context)
        throws ArgumentOutOfRange,
               DeviceNotActive
    {
        try
        {
            _iceI_setZoomAsync(zoomDegree, context, true).waitForResponseOrUserEx();
        }
        catch(ArgumentOutOfRange ex)
        {
            throw ex;
        }
        catch(DeviceNotActive ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> setZoomAsync(float zoomDegree)
    {
        return _iceI_setZoomAsync(zoomDegree, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> setZoomAsync(float zoomDegree, java.util.Map<String, String> context)
    {
        return _iceI_setZoomAsync(zoomDegree, context, false);
    }

    /**
     * @hidden
     * @param iceP_zoomDegree -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_setZoomAsync(float iceP_zoomDegree, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "setZoom", null, sync, _iceE_setZoom);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeFloat(iceP_zoomDegree);
                 }, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_setZoom =
    {
        ArgumentOutOfRange.class,
        DeviceNotActive.class
    };

    default float getCurrentZoom()
        throws DeviceNotActive
    {
        return getCurrentZoom(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default float getCurrentZoom(java.util.Map<String, String> context)
        throws DeviceNotActive
    {
        try
        {
            return _iceI_getCurrentZoomAsync(context, true).waitForResponseOrUserEx();
        }
        catch(DeviceNotActive ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<java.lang.Float> getCurrentZoomAsync()
    {
        return _iceI_getCurrentZoomAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.Float> getCurrentZoomAsync(java.util.Map<String, String> context)
    {
        return _iceI_getCurrentZoomAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Float> _iceI_getCurrentZoomAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Float> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getCurrentZoom", null, sync, _iceE_getCurrentZoom);
        f.invoke(true, context, null, null, istr -> {
                     float ret;
                     ret = istr.readFloat();
                     return ret;
                 });
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_getCurrentZoom =
    {
        DeviceNotActive.class
    };

    default float getMaxZoom()
        throws DeviceNotActive
    {
        return getMaxZoom(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default float getMaxZoom(java.util.Map<String, String> context)
        throws DeviceNotActive
    {
        try
        {
            return _iceI_getMaxZoomAsync(context, true).waitForResponseOrUserEx();
        }
        catch(DeviceNotActive ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<java.lang.Float> getMaxZoomAsync()
    {
        return _iceI_getMaxZoomAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.Float> getMaxZoomAsync(java.util.Map<String, String> context)
    {
        return _iceI_getMaxZoomAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Float> _iceI_getMaxZoomAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Float> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getMaxZoom", null, sync, _iceE_getMaxZoom);
        f.invoke(true, context, null, null, istr -> {
                     float ret;
                     ret = istr.readFloat();
                     return ret;
                 });
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_getMaxZoom =
    {
        DeviceNotActive.class
    };

    default void setTilt(float tiltDegree)
        throws ArgumentOutOfRange,
               DeviceNotActive
    {
        setTilt(tiltDegree, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void setTilt(float tiltDegree, java.util.Map<String, String> context)
        throws ArgumentOutOfRange,
               DeviceNotActive
    {
        try
        {
            _iceI_setTiltAsync(tiltDegree, context, true).waitForResponseOrUserEx();
        }
        catch(ArgumentOutOfRange ex)
        {
            throw ex;
        }
        catch(DeviceNotActive ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> setTiltAsync(float tiltDegree)
    {
        return _iceI_setTiltAsync(tiltDegree, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> setTiltAsync(float tiltDegree, java.util.Map<String, String> context)
    {
        return _iceI_setTiltAsync(tiltDegree, context, false);
    }

    /**
     * @hidden
     * @param iceP_tiltDegree -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_setTiltAsync(float iceP_tiltDegree, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "setTilt", null, sync, _iceE_setTilt);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeFloat(iceP_tiltDegree);
                 }, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_setTilt =
    {
        ArgumentOutOfRange.class,
        DeviceNotActive.class
    };

    default void turnUp(float tiltDegree)
        throws ArgumentOutOfRange,
               DeviceNotActive
    {
        turnUp(tiltDegree, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void turnUp(float tiltDegree, java.util.Map<String, String> context)
        throws ArgumentOutOfRange,
               DeviceNotActive
    {
        try
        {
            _iceI_turnUpAsync(tiltDegree, context, true).waitForResponseOrUserEx();
        }
        catch(ArgumentOutOfRange ex)
        {
            throw ex;
        }
        catch(DeviceNotActive ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> turnUpAsync(float tiltDegree)
    {
        return _iceI_turnUpAsync(tiltDegree, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> turnUpAsync(float tiltDegree, java.util.Map<String, String> context)
    {
        return _iceI_turnUpAsync(tiltDegree, context, false);
    }

    /**
     * @hidden
     * @param iceP_tiltDegree -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_turnUpAsync(float iceP_tiltDegree, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "turnUp", null, sync, _iceE_turnUp);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeFloat(iceP_tiltDegree);
                 }, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_turnUp =
    {
        ArgumentOutOfRange.class,
        DeviceNotActive.class
    };

    default void turnDown(float tiltDegree)
        throws ArgumentOutOfRange,
               DeviceNotActive
    {
        turnDown(tiltDegree, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void turnDown(float tiltDegree, java.util.Map<String, String> context)
        throws ArgumentOutOfRange,
               DeviceNotActive
    {
        try
        {
            _iceI_turnDownAsync(tiltDegree, context, true).waitForResponseOrUserEx();
        }
        catch(ArgumentOutOfRange ex)
        {
            throw ex;
        }
        catch(DeviceNotActive ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> turnDownAsync(float tiltDegree)
    {
        return _iceI_turnDownAsync(tiltDegree, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> turnDownAsync(float tiltDegree, java.util.Map<String, String> context)
    {
        return _iceI_turnDownAsync(tiltDegree, context, false);
    }

    /**
     * @hidden
     * @param iceP_tiltDegree -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_turnDownAsync(float iceP_tiltDegree, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "turnDown", null, sync, _iceE_turnDown);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeFloat(iceP_tiltDegree);
                 }, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_turnDown =
    {
        ArgumentOutOfRange.class,
        DeviceNotActive.class
    };

    default float getCurrentTilt()
        throws DeviceNotActive
    {
        return getCurrentTilt(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default float getCurrentTilt(java.util.Map<String, String> context)
        throws DeviceNotActive
    {
        try
        {
            return _iceI_getCurrentTiltAsync(context, true).waitForResponseOrUserEx();
        }
        catch(DeviceNotActive ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<java.lang.Float> getCurrentTiltAsync()
    {
        return _iceI_getCurrentTiltAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.Float> getCurrentTiltAsync(java.util.Map<String, String> context)
    {
        return _iceI_getCurrentTiltAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Float> _iceI_getCurrentTiltAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Float> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getCurrentTilt", null, sync, _iceE_getCurrentTilt);
        f.invoke(true, context, null, null, istr -> {
                     float ret;
                     ret = istr.readFloat();
                     return ret;
                 });
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_getCurrentTilt =
    {
        DeviceNotActive.class
    };

    default float getMinTilt()
        throws DeviceNotActive
    {
        return getMinTilt(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default float getMinTilt(java.util.Map<String, String> context)
        throws DeviceNotActive
    {
        try
        {
            return _iceI_getMinTiltAsync(context, true).waitForResponseOrUserEx();
        }
        catch(DeviceNotActive ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<java.lang.Float> getMinTiltAsync()
    {
        return _iceI_getMinTiltAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.Float> getMinTiltAsync(java.util.Map<String, String> context)
    {
        return _iceI_getMinTiltAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Float> _iceI_getMinTiltAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Float> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getMinTilt", null, sync, _iceE_getMinTilt);
        f.invoke(true, context, null, null, istr -> {
                     float ret;
                     ret = istr.readFloat();
                     return ret;
                 });
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_getMinTilt =
    {
        DeviceNotActive.class
    };

    default float getMaxTilt()
        throws DeviceNotActive
    {
        return getMaxTilt(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default float getMaxTilt(java.util.Map<String, String> context)
        throws DeviceNotActive
    {
        try
        {
            return _iceI_getMaxTiltAsync(context, true).waitForResponseOrUserEx();
        }
        catch(DeviceNotActive ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<java.lang.Float> getMaxTiltAsync()
    {
        return _iceI_getMaxTiltAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.Float> getMaxTiltAsync(java.util.Map<String, String> context)
    {
        return _iceI_getMaxTiltAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Float> _iceI_getMaxTiltAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Float> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getMaxTilt", null, sync, _iceE_getMaxTilt);
        f.invoke(true, context, null, null, istr -> {
                     float ret;
                     ret = istr.readFloat();
                     return ret;
                 });
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_getMaxTilt =
    {
        DeviceNotActive.class
    };

    default void setPan(float panDegree)
        throws ArgumentOutOfRange,
               DeviceNotActive
    {
        setPan(panDegree, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void setPan(float panDegree, java.util.Map<String, String> context)
        throws ArgumentOutOfRange,
               DeviceNotActive
    {
        try
        {
            _iceI_setPanAsync(panDegree, context, true).waitForResponseOrUserEx();
        }
        catch(ArgumentOutOfRange ex)
        {
            throw ex;
        }
        catch(DeviceNotActive ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> setPanAsync(float panDegree)
    {
        return _iceI_setPanAsync(panDegree, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> setPanAsync(float panDegree, java.util.Map<String, String> context)
    {
        return _iceI_setPanAsync(panDegree, context, false);
    }

    /**
     * @hidden
     * @param iceP_panDegree -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_setPanAsync(float iceP_panDegree, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "setPan", null, sync, _iceE_setPan);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeFloat(iceP_panDegree);
                 }, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_setPan =
    {
        ArgumentOutOfRange.class,
        DeviceNotActive.class
    };

    default void turnLeft(float panDegree)
        throws ArgumentOutOfRange,
               DeviceNotActive
    {
        turnLeft(panDegree, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void turnLeft(float panDegree, java.util.Map<String, String> context)
        throws ArgumentOutOfRange,
               DeviceNotActive
    {
        try
        {
            _iceI_turnLeftAsync(panDegree, context, true).waitForResponseOrUserEx();
        }
        catch(ArgumentOutOfRange ex)
        {
            throw ex;
        }
        catch(DeviceNotActive ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> turnLeftAsync(float panDegree)
    {
        return _iceI_turnLeftAsync(panDegree, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> turnLeftAsync(float panDegree, java.util.Map<String, String> context)
    {
        return _iceI_turnLeftAsync(panDegree, context, false);
    }

    /**
     * @hidden
     * @param iceP_panDegree -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_turnLeftAsync(float iceP_panDegree, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "turnLeft", null, sync, _iceE_turnLeft);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeFloat(iceP_panDegree);
                 }, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_turnLeft =
    {
        ArgumentOutOfRange.class,
        DeviceNotActive.class
    };

    default void turnRight(float panDegree)
        throws ArgumentOutOfRange,
               DeviceNotActive
    {
        turnRight(panDegree, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void turnRight(float panDegree, java.util.Map<String, String> context)
        throws ArgumentOutOfRange,
               DeviceNotActive
    {
        try
        {
            _iceI_turnRightAsync(panDegree, context, true).waitForResponseOrUserEx();
        }
        catch(ArgumentOutOfRange ex)
        {
            throw ex;
        }
        catch(DeviceNotActive ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> turnRightAsync(float panDegree)
    {
        return _iceI_turnRightAsync(panDegree, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> turnRightAsync(float panDegree, java.util.Map<String, String> context)
    {
        return _iceI_turnRightAsync(panDegree, context, false);
    }

    /**
     * @hidden
     * @param iceP_panDegree -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_turnRightAsync(float iceP_panDegree, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "turnRight", null, sync, _iceE_turnRight);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeFloat(iceP_panDegree);
                 }, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_turnRight =
    {
        ArgumentOutOfRange.class,
        DeviceNotActive.class
    };

    default float getCurrentPan()
        throws DeviceNotActive
    {
        return getCurrentPan(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default float getCurrentPan(java.util.Map<String, String> context)
        throws DeviceNotActive
    {
        try
        {
            return _iceI_getCurrentPanAsync(context, true).waitForResponseOrUserEx();
        }
        catch(DeviceNotActive ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<java.lang.Float> getCurrentPanAsync()
    {
        return _iceI_getCurrentPanAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.Float> getCurrentPanAsync(java.util.Map<String, String> context)
    {
        return _iceI_getCurrentPanAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Float> _iceI_getCurrentPanAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Float> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getCurrentPan", null, sync, _iceE_getCurrentPan);
        f.invoke(true, context, null, null, istr -> {
                     float ret;
                     ret = istr.readFloat();
                     return ret;
                 });
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_getCurrentPan =
    {
        DeviceNotActive.class
    };

    default float getMaxPan()
        throws DeviceNotActive
    {
        return getMaxPan(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default float getMaxPan(java.util.Map<String, String> context)
        throws DeviceNotActive
    {
        try
        {
            return _iceI_getMaxPanAsync(context, true).waitForResponseOrUserEx();
        }
        catch(DeviceNotActive ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<java.lang.Float> getMaxPanAsync()
    {
        return _iceI_getMaxPanAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.Float> getMaxPanAsync(java.util.Map<String, String> context)
    {
        return _iceI_getMaxPanAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Float> _iceI_getMaxPanAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Float> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getMaxPan", null, sync, _iceE_getMaxPan);
        f.invoke(true, context, null, null, istr -> {
                     float ret;
                     ret = istr.readFloat();
                     return ret;
                 });
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_getMaxPan =
    {
        DeviceNotActive.class
    };

    default float getMinPan()
        throws DeviceNotActive
    {
        return getMinPan(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default float getMinPan(java.util.Map<String, String> context)
        throws DeviceNotActive
    {
        try
        {
            return _iceI_getMinPanAsync(context, true).waitForResponseOrUserEx();
        }
        catch(DeviceNotActive ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<java.lang.Float> getMinPanAsync()
    {
        return _iceI_getMinPanAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.Float> getMinPanAsync(java.util.Map<String, String> context)
    {
        return _iceI_getMinPanAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Float> _iceI_getMinPanAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Float> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getMinPan", null, sync, _iceE_getMinPan);
        f.invoke(true, context, null, null, istr -> {
                     float ret;
                     ret = istr.readFloat();
                     return ret;
                 });
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_getMinPan =
    {
        DeviceNotActive.class
    };

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static CameraPrx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, ice_staticId(), CameraPrx.class, _CameraPrxI.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static CameraPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, context, ice_staticId(), CameraPrx.class, _CameraPrxI.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static CameraPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, facet, ice_staticId(), CameraPrx.class, _CameraPrxI.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static CameraPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, facet, context, ice_staticId(), CameraPrx.class, _CameraPrxI.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static CameraPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return com.zeroc.Ice.ObjectPrx._uncheckedCast(obj, CameraPrx.class, _CameraPrxI.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static CameraPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return com.zeroc.Ice.ObjectPrx._uncheckedCast(obj, facet, CameraPrx.class, _CameraPrxI.class);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the per-proxy context.
     * @param newContext The context for the new proxy.
     * @return A proxy with the specified per-proxy context.
     **/
    @Override
    default CameraPrx ice_context(java.util.Map<String, String> newContext)
    {
        return (CameraPrx)_ice_context(newContext);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the adapter ID.
     * @param newAdapterId The adapter ID for the new proxy.
     * @return A proxy with the specified adapter ID.
     **/
    @Override
    default CameraPrx ice_adapterId(String newAdapterId)
    {
        return (CameraPrx)_ice_adapterId(newAdapterId);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the endpoints.
     * @param newEndpoints The endpoints for the new proxy.
     * @return A proxy with the specified endpoints.
     **/
    @Override
    default CameraPrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints)
    {
        return (CameraPrx)_ice_endpoints(newEndpoints);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the locator cache timeout.
     * @param newTimeout The new locator cache timeout (in seconds).
     * @return A proxy with the specified locator cache timeout.
     **/
    @Override
    default CameraPrx ice_locatorCacheTimeout(int newTimeout)
    {
        return (CameraPrx)_ice_locatorCacheTimeout(newTimeout);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the invocation timeout.
     * @param newTimeout The new invocation timeout (in seconds).
     * @return A proxy with the specified invocation timeout.
     **/
    @Override
    default CameraPrx ice_invocationTimeout(int newTimeout)
    {
        return (CameraPrx)_ice_invocationTimeout(newTimeout);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for connection caching.
     * @param newCache <code>true</code> if the new proxy should cache connections; <code>false</code> otherwise.
     * @return A proxy with the specified caching policy.
     **/
    @Override
    default CameraPrx ice_connectionCached(boolean newCache)
    {
        return (CameraPrx)_ice_connectionCached(newCache);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the endpoint selection policy.
     * @param newType The new endpoint selection policy.
     * @return A proxy with the specified endpoint selection policy.
     **/
    @Override
    default CameraPrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType)
    {
        return (CameraPrx)_ice_endpointSelection(newType);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for how it selects endpoints.
     * @param b If <code>b</code> is <code>true</code>, only endpoints that use a secure transport are
     * used by the new proxy. If <code>b</code> is false, the returned proxy uses both secure and
     * insecure endpoints.
     * @return A proxy with the specified selection policy.
     **/
    @Override
    default CameraPrx ice_secure(boolean b)
    {
        return (CameraPrx)_ice_secure(b);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the encoding used to marshal parameters.
     * @param e The encoding version to use to marshal request parameters.
     * @return A proxy with the specified encoding version.
     **/
    @Override
    default CameraPrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e)
    {
        return (CameraPrx)_ice_encodingVersion(e);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for its endpoint selection policy.
     * @param b If <code>b</code> is <code>true</code>, the new proxy will use secure endpoints for invocations
     * and only use insecure endpoints if an invocation cannot be made via secure endpoints. If <code>b</code> is
     * <code>false</code>, the proxy prefers insecure endpoints to secure ones.
     * @return A proxy with the specified selection policy.
     **/
    @Override
    default CameraPrx ice_preferSecure(boolean b)
    {
        return (CameraPrx)_ice_preferSecure(b);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the router.
     * @param router The router for the new proxy.
     * @return A proxy with the specified router.
     **/
    @Override
    default CameraPrx ice_router(com.zeroc.Ice.RouterPrx router)
    {
        return (CameraPrx)_ice_router(router);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the locator.
     * @param locator The locator for the new proxy.
     * @return A proxy with the specified locator.
     **/
    @Override
    default CameraPrx ice_locator(com.zeroc.Ice.LocatorPrx locator)
    {
        return (CameraPrx)_ice_locator(locator);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for collocation optimization.
     * @param b <code>true</code> if the new proxy enables collocation optimization; <code>false</code> otherwise.
     * @return A proxy with the specified collocation optimization.
     **/
    @Override
    default CameraPrx ice_collocationOptimized(boolean b)
    {
        return (CameraPrx)_ice_collocationOptimized(b);
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses twoway invocations.
     * @return A proxy that uses twoway invocations.
     **/
    @Override
    default CameraPrx ice_twoway()
    {
        return (CameraPrx)_ice_twoway();
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses oneway invocations.
     * @return A proxy that uses oneway invocations.
     **/
    @Override
    default CameraPrx ice_oneway()
    {
        return (CameraPrx)_ice_oneway();
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses batch oneway invocations.
     * @return A proxy that uses batch oneway invocations.
     **/
    @Override
    default CameraPrx ice_batchOneway()
    {
        return (CameraPrx)_ice_batchOneway();
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses datagram invocations.
     * @return A proxy that uses datagram invocations.
     **/
    @Override
    default CameraPrx ice_datagram()
    {
        return (CameraPrx)_ice_datagram();
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses batch datagram invocations.
     * @return A proxy that uses batch datagram invocations.
     **/
    @Override
    default CameraPrx ice_batchDatagram()
    {
        return (CameraPrx)_ice_batchDatagram();
    }

    /**
     * Returns a proxy that is identical to this proxy, except for compression.
     * @param co <code>true</code> enables compression for the new proxy; <code>false</code> disables compression.
     * @return A proxy with the specified compression setting.
     **/
    @Override
    default CameraPrx ice_compress(boolean co)
    {
        return (CameraPrx)_ice_compress(co);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for its connection timeout setting.
     * @param t The connection timeout for the proxy in milliseconds.
     * @return A proxy with the specified timeout.
     **/
    @Override
    default CameraPrx ice_timeout(int t)
    {
        return (CameraPrx)_ice_timeout(t);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for its connection ID.
     * @param connectionId The connection ID for the new proxy. An empty string removes the connection ID.
     * @return A proxy with the specified connection ID.
     **/
    @Override
    default CameraPrx ice_connectionId(String connectionId)
    {
        return (CameraPrx)_ice_connectionId(connectionId);
    }

    /**
     * Returns a proxy that is identical to this proxy, except it's a fixed proxy bound
     * the given connection.@param connection The fixed proxy connection.
     * @return A fixed proxy bound to the given connection.
     **/
    @Override
    default CameraPrx ice_fixed(com.zeroc.Ice.Connection connection)
    {
        return (CameraPrx)_ice_fixed(connection);
    }

    static String ice_staticId()
    {
        return "::iot::Camera";
    }
}
