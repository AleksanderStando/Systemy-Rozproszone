//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.3
//
// <auto-generated>
//
// Generated from file `iot.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package iot;

public interface Camera extends BasicDevice
{
    void setZoom(float zoomDegree, com.zeroc.Ice.Current current)
        throws ArgumentOutOfRange,
               DeviceNotActive;

    float getCurrentZoom(com.zeroc.Ice.Current current)
        throws DeviceNotActive;

    float getMaxZoom(com.zeroc.Ice.Current current)
        throws DeviceNotActive;

    void setTilt(float tiltDegree, com.zeroc.Ice.Current current)
        throws ArgumentOutOfRange,
               DeviceNotActive;

    void turnUp(float tiltDegree, com.zeroc.Ice.Current current)
        throws ArgumentOutOfRange,
               DeviceNotActive;

    void turnDown(float tiltDegree, com.zeroc.Ice.Current current)
        throws ArgumentOutOfRange,
               DeviceNotActive;

    float getCurrentTilt(com.zeroc.Ice.Current current)
        throws DeviceNotActive;

    float getMinTilt(com.zeroc.Ice.Current current)
        throws DeviceNotActive;

    float getMaxTilt(com.zeroc.Ice.Current current)
        throws DeviceNotActive;

    void setPan(float panDegree, com.zeroc.Ice.Current current)
        throws ArgumentOutOfRange,
               DeviceNotActive;

    void turnLeft(float panDegree, com.zeroc.Ice.Current current)
        throws ArgumentOutOfRange,
               DeviceNotActive;

    void turnRight(float panDegree, com.zeroc.Ice.Current current)
        throws ArgumentOutOfRange,
               DeviceNotActive;

    float getCurrentPan(com.zeroc.Ice.Current current)
        throws DeviceNotActive;

    float getMaxPan(com.zeroc.Ice.Current current)
        throws DeviceNotActive;

    float getMinPan(com.zeroc.Ice.Current current)
        throws DeviceNotActive;

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::iot::BasicDevice",
        "::iot::Camera"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::iot::Camera";
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_setZoom(Camera obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        float iceP_zoomDegree;
        iceP_zoomDegree = istr.readFloat();
        inS.endReadParams();
        obj.setZoom(iceP_zoomDegree, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getCurrentZoom(Camera obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        float ret = obj.getCurrentZoom(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeFloat(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getMaxZoom(Camera obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        float ret = obj.getMaxZoom(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeFloat(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_setTilt(Camera obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        float iceP_tiltDegree;
        iceP_tiltDegree = istr.readFloat();
        inS.endReadParams();
        obj.setTilt(iceP_tiltDegree, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_turnUp(Camera obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        float iceP_tiltDegree;
        iceP_tiltDegree = istr.readFloat();
        inS.endReadParams();
        obj.turnUp(iceP_tiltDegree, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_turnDown(Camera obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        float iceP_tiltDegree;
        iceP_tiltDegree = istr.readFloat();
        inS.endReadParams();
        obj.turnDown(iceP_tiltDegree, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getCurrentTilt(Camera obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        float ret = obj.getCurrentTilt(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeFloat(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getMinTilt(Camera obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        float ret = obj.getMinTilt(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeFloat(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getMaxTilt(Camera obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        float ret = obj.getMaxTilt(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeFloat(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_setPan(Camera obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        float iceP_panDegree;
        iceP_panDegree = istr.readFloat();
        inS.endReadParams();
        obj.setPan(iceP_panDegree, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_turnLeft(Camera obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        float iceP_panDegree;
        iceP_panDegree = istr.readFloat();
        inS.endReadParams();
        obj.turnLeft(iceP_panDegree, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_turnRight(Camera obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        float iceP_panDegree;
        iceP_panDegree = istr.readFloat();
        inS.endReadParams();
        obj.turnRight(iceP_panDegree, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getCurrentPan(Camera obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        float ret = obj.getCurrentPan(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeFloat(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getMaxPan(Camera obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        float ret = obj.getMaxPan(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeFloat(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getMinPan(Camera obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        float ret = obj.getMinPan(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeFloat(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /** @hidden */
    final static String[] _iceOps =
    {
        "getCurrentPan",
        "getCurrentTilt",
        "getCurrentZoom",
        "getMaxPan",
        "getMaxTilt",
        "getMaxZoom",
        "getMinPan",
        "getMinTilt",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "setPan",
        "setTilt",
        "setZoom",
        "switchOff",
        "switchOn",
        "turnDown",
        "turnLeft",
        "turnRight",
        "turnUp"
    };

    /** @hidden */
    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceDispatch(com.zeroc.IceInternal.Incoming in, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        int pos = java.util.Arrays.binarySearch(_iceOps, current.operation);
        if(pos < 0)
        {
            throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return _iceD_getCurrentPan(this, in, current);
            }
            case 1:
            {
                return _iceD_getCurrentTilt(this, in, current);
            }
            case 2:
            {
                return _iceD_getCurrentZoom(this, in, current);
            }
            case 3:
            {
                return _iceD_getMaxPan(this, in, current);
            }
            case 4:
            {
                return _iceD_getMaxTilt(this, in, current);
            }
            case 5:
            {
                return _iceD_getMaxZoom(this, in, current);
            }
            case 6:
            {
                return _iceD_getMinPan(this, in, current);
            }
            case 7:
            {
                return _iceD_getMinTilt(this, in, current);
            }
            case 8:
            {
                return com.zeroc.Ice.Object._iceD_ice_id(this, in, current);
            }
            case 9:
            {
                return com.zeroc.Ice.Object._iceD_ice_ids(this, in, current);
            }
            case 10:
            {
                return com.zeroc.Ice.Object._iceD_ice_isA(this, in, current);
            }
            case 11:
            {
                return com.zeroc.Ice.Object._iceD_ice_ping(this, in, current);
            }
            case 12:
            {
                return _iceD_setPan(this, in, current);
            }
            case 13:
            {
                return _iceD_setTilt(this, in, current);
            }
            case 14:
            {
                return _iceD_setZoom(this, in, current);
            }
            case 15:
            {
                return BasicDevice._iceD_switchOff(this, in, current);
            }
            case 16:
            {
                return BasicDevice._iceD_switchOn(this, in, current);
            }
            case 17:
            {
                return _iceD_turnDown(this, in, current);
            }
            case 18:
            {
                return _iceD_turnLeft(this, in, current);
            }
            case 19:
            {
                return _iceD_turnRight(this, in, current);
            }
            case 20:
            {
                return _iceD_turnUp(this, in, current);
            }
        }

        assert(false);
        throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
    }
}
